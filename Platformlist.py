import asyncio
from datetime import datetime
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

BOT_TOKEN = ""

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_states = {}
user_trips = {}
user_drivers = {}
user_vehicles = {}
user_selections = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞


def get_main_menu_keyboard():
    k = [
        [InlineKeyboardButton(text='  –°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å', callback_data='create_trip')],
        [InlineKeyboardButton(text='  –ú–æ–∏ –≤–æ–¥–∏—Ç–µ–ª–∏', callback_data='my_drivers')],
        [InlineKeyboardButton(text='  –ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', callback_data='my_transport')],
        [InlineKeyboardButton(text='  –ú–æ–∏ —Ä–µ–π—Å—ã', callback_data='my_trips')],
        [InlineKeyboardButton(text='  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', callback_data='platform')],
        [InlineKeyboardButton(text='  –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=k)


def get_back_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return builder.as_markup()


def get_trip_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–π", callback_data="regular_trip"))
    builder.row(InlineKeyboardButton(text="üéØ –ó–∞–∫–∞–∑–Ω–æ–π", callback_data="custom_trip"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return builder.as_markup()


def get_drivers_management_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="add_driver"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="delete_driver"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    return builder.as_markup()


def get_vehicles_management_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="add_vehicle"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="delete_vehicle"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    return builder.as_markup()


def get_drivers_selection_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ—Ç–∫–æ–π –≥–∞–ª–æ—á–∫–æ–π"""
    user_drivers_list = user_drivers.get(user_id, [])
    selected_drivers = user_selections.get(user_id, {}).get('selected_drivers', [])

    builder = InlineKeyboardBuilder()

    for i, driver in enumerate(user_drivers_list):
        if i in selected_drivers:
            builder.row(InlineKeyboardButton(text=f"‚úÖ {driver['name']}", callback_data=f"toggle_driver_{i}"))
        else:
            builder.row(InlineKeyboardButton(text=f"‚ùå {driver['name']}", callback_data=f"toggle_driver_{i}"))

    if selected_drivers:
        builder.row(InlineKeyboardButton(text="üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏", callback_data="confirm_drivers"))

    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="add_driver_in_trip"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))

    return builder.as_markup()


def get_vehicles_selection_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    user_vehicles_list = user_vehicles.get(user_id, [])
    builder = InlineKeyboardBuilder()

    for i, vehicle in enumerate(user_vehicles_list):
        builder.row(
            InlineKeyboardButton(text=f"{vehicle['model']} ({vehicle['number']})", callback_data=f"select_vehicle_{i}"))

    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="add_vehicle_in_trip"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))

    return builder.as_markup()


def validate_datetime_format(datetime_text: str) -> bool:
    try:
        parts = datetime_text.split()
        if len(parts) != 2:
            return False

        date_part, time_part = parts
        date_parts = date_part.split('.')
        if len(date_parts) != 3:
            return False

        day, month, year = date_parts
        if not (day.isdigit() and month.isdigit() and year.isdigit()):
            return False

        day_int = int(day)
        month_int = int(month)
        year_int = int(year)
        current_year = datetime.now().year

        if not (1 <= month_int <= 12):
            return False
        if not (year_int >= current_year):
            return False

        if month_int in [1, 3, 5, 7, 8, 10, 12]:
            if not (1 <= day_int <= 31):
                return False
        elif month_int in [4, 6, 9, 11]:
            if not (1 <= day_int <= 30):
                return False
        else:
            if (year_int % 4 == 0 and year_int % 100 != 0) or (year_int % 400 == 0):
                if not (1 <= day_int <= 29):
                    return False
            else:
                if not (1 <= day_int <= 28):
                    return False

        time_parts = time_part.split(':')
        if len(time_parts) != 2:
            return False

        hour, minute = time_parts
        if not (hour.isdigit() and minute.isdigit()):
            return False

        hour_int = int(hour)
        minute_int = int(minute)
        if not (0 <= hour_int <= 23 and 0 <= minute_int <= 59):
            return False

        return True
    except:
        return False


def validate_birth_date(date_text: str) -> bool:
    try:
        date_parts = date_text.split('.')
        if len(date_parts) != 3:
            return False

        day, month, year = date_parts
        if not (day.isdigit() and month.isdigit() and year.isdigit()):
            return False

        day_int = int(day)
        month_int = int(month)
        year_int = int(year)

        if not (1 <= month_int <= 12):
            return False
        if not (1900 <= year_int <= datetime.now().year - 18):
            return False

        if month_int in [1, 3, 5, 7, 8, 10, 12]:
            if not (1 <= day_int <= 31):
                return False
        elif month_int in [4, 6, 9, 11]:
            if not (1 <= day_int <= 30):
                return False
        else:
            if (year_int % 4 == 0 and year_int % 100 != 0) or (year_int % 400 == 0):
                if not (1 <= day_int <= 29):
                    return False
            else:
                if not (1 <= day_int <= 28):
                    return False

        return True
    except:
        return False


def validate_passport(passport_text: str) -> bool:
    return len(passport_text) == 10 and passport_text.isdigit()


def validate_vehicle_number(number_text: str) -> bool:
    if len(number_text) < 3:
        return False
    return any(c.isalpha() for c in number_text) or any(c.isdigit() for c in number_text)


def validate_route(route_text: str) -> bool:
    parts = route_text.split('-')
    return len(parts) >= 2 and all(part.strip() for part in parts)


def get_user_state(user_id):
    user_state = user_states.get(user_id)
    if isinstance(user_state, dict):
        return user_state.get("state")
    return None


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"state": "waiting_company_name"}

    try:
        await message.answer_photo(
            photo=FSInputFile("Pictures/Hello.jpg"),
            caption="üë®‚Äçüíª –Ø - —Ç–≤–æ–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫\n\n –ß–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ '–ú–æ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'.\n\nüìå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è!",
            parse_mode="HTML"
        )
    except:
        await message.answer(
            "üë®‚Äçüíª –Ø - —Ç–≤–æ–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫\n\n –ß–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ '–ú–æ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'.\n\nüìå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è!",
            parse_mode="HTML"
        )

    await message.answer(
        "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–ü –ò–≤–∞–Ω–æ–≤",
        parse_mode="HTML"
    )


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_company_name")
async def handle_company_name(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"state": "waiting_phone"}

    await message.answer(
        f"üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
        parse_mode="HTML"
    )


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_phone")
async def handle_phone(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {}

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–π—Å—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.‚ú®‚ú®‚ú®",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )


@dp.callback_query(lambda c: c.data == "back_to_menu")
async def handle_back_to_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {}

    await callback.message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )


@dp.callback_query(lambda c: c.data == "back")
async def handle_back(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_state = user_states.get(user_id, {})
    current_state = user_state.get("state")
    previous_state = user_state.get("previous_state")

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if not previous_state:
        await handle_back_to_menu(callback)
        return

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞
    if current_state == "waiting_trip_type":
        await handle_back_to_menu(callback)
    elif current_state == "waiting_route":
        await handle_create_trip(callback)
    elif current_state == "waiting_departure_datetime":
        user_state.update({
            "state": "waiting_route",
            "previous_state": "waiting_trip_type"
        })
        trip_type = user_state.get('trip_type', '')
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–µ–π—Å–∞: {trip_type.upper() if trip_type else ''}\n\nüìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥-–ì–æ—Ä–æ–¥-–ì–æ—Ä–æ–¥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞-–°–º–æ–ª–µ–Ω—Å–∫-–ú–æ—Å–∫–≤–∞",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
    elif current_state == "waiting_arrival_datetime":
        user_state.update({
            "state": "waiting_departure_datetime",
            "previous_state": "waiting_route"
        })
        route = user_state.get('route', '')
        await callback.message.edit_text(
            f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 05.01.2025 14:00",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
    elif current_state == "waiting_driver_selection":
        user_state.update({
            "state": "waiting_arrival_datetime",
            "previous_state": "waiting_departure_datetime"
        })
        departure_datetime = user_state.get('departure_datetime', '')
        await callback.message.edit_text(
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_datetime}\n\nüïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 05.01.2025 18:00",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
    elif current_state == "waiting_vehicle_selection":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–æ–¥–∏—Ç–µ–ª—è
        user_drivers_list = user_drivers.get(user_id, [])
        if user_drivers_list:
            keyboard = get_drivers_selection_keyboard(user_id)
            await callback.message.edit_text(
                "üë®‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            user_state.update({
                "state": "waiting_new_driver_name",
                "previous_state": "waiting_driver_selection"
            })
            await callback.message.edit_text(
                "üë®‚Äçüíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤–æ–≥–æ!",
                parse_mode="HTML"
            )
            await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ–±—ã–≤–∞–µ–≤ –û–ª–µ–≥ –í–∞—Å–∏–ª—å–µ–≤–∏—á")
    elif current_state == "waiting_passenger_count":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        user_vehicles_list = user_vehicles.get(user_id, [])
        if user_vehicles_list:
            keyboard = get_vehicles_selection_keyboard(user_id)
            await callback.message.edit_text(
                "üöå –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            user_state.update({
                "state": "waiting_new_vehicle_model",
                "previous_state": "waiting_vehicle_selection"
            })
            await callback.message.edit_text(
                "üöå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π!",
                parse_mode="HTML"
            )
            await callback.message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–ø—Ä–∏–Ω—Ç–µ—Ä")
    elif current_state in ["waiting_new_driver_name", "waiting_new_driver_birth_date", "waiting_new_driver_passport"]:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
        user_drivers_list = user_drivers.get(user_id, [])
        if user_drivers_list:
            keyboard = get_drivers_selection_keyboard(user_id)
            await callback.message.edit_text(
                "üë®‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            user_state.update({
                "state": "waiting_new_driver_name",
                "previous_state": "waiting_driver_selection"
            })
            await callback.message.edit_text(
                "üë®‚Äçüíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤–æ–≥–æ!",
                parse_mode="HTML"
            )
            await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ–±—ã–≤–∞–µ–≤ –û–ª–µ–≥ –í–∞—Å–∏–ª—å–µ–≤–∏—á")
    elif current_state in ["waiting_new_vehicle_model", "waiting_new_vehicle_number"]:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
        user_vehicles_list = user_vehicles.get(user_id, [])
        if user_vehicles_list:
            keyboard = get_vehicles_selection_keyboard(user_id)
            await callback.message.edit_text(
                "üöå –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            user_state.update({
                "state": "waiting_new_vehicle_model",
                "previous_state": "waiting_vehicle_selection"
            })
            await callback.message.edit_text(
                "üöå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π!",
                parse_mode="HTML"
            )
            await callback.message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–ø—Ä–∏–Ω—Ç–µ—Ä")
    else:
        await callback.message.answer(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )


@dp.callback_query(lambda c: c.data == "create_trip")
async def handle_create_trip(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {
        "state": "waiting_trip_type",
        "previous_state": "menu"
    }

    await callback.message.edit_text(
        "üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Å–∞:",
        parse_mode="HTML",
        reply_markup=get_trip_type_keyboard()
    )


@dp.callback_query(lambda c: c.data in ["regular_trip", "custom_trip"])
async def handle_trip_type_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    trip_type = "—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π" if callback.data == "regular_trip" else "–∑–∞–∫–∞–∑–Ω–æ–π"
    user_states[user_id] = {
        "state": "waiting_route",
        "previous_state": "waiting_trip_type",
        "trip_type": trip_type
    }

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–µ–π—Å–∞: {trip_type.upper()}\n\nüìç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥-–ì–æ—Ä–æ–¥-–ì–æ—Ä–æ–¥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞-–°–º–æ–ª–µ–Ω—Å–∫-–ú–æ—Å–∫–≤–∞",
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_route")
async def handle_route(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    route_text = message.text.strip()

    if not validate_route(route_text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞!\n\nüìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥-–ì–æ—Ä–æ–¥-–ì–æ—Ä–æ–¥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞-–°–º–æ–ª–µ–Ω—Å–∫-–ú–æ—Å–∫–≤–∞",
            reply_markup=get_back_keyboard()
        )
        return

    user_state.update({
        "route": route_text,
        "state": "waiting_departure_datetime",
        "previous_state": "waiting_route"
    })

    await message.answer(
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route_text}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 05.01.2025 14:00",
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_departure_datetime")
async def handle_departure_datetime(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    datetime_text = message.text.strip()

    if not validate_datetime_format(datetime_text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 05.01.2025 14:00\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return

    user_state.update({
        "departure_datetime": datetime_text,
        "state": "waiting_arrival_datetime",
        "previous_state": "waiting_departure_datetime"
    })

    await message.answer(
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {datetime_text}\n\nüïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 05.01.2025 18:00",
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_arrival_datetime")
async def handle_arrival_datetime(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    datetime_text = message.text.strip()

    if not validate_datetime_format(datetime_text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 05.01.2025 18:00\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        return

    user_state.update({
        "arrival_datetime": datetime_text,
        "state": "waiting_driver_selection",
        "previous_state": "waiting_arrival_datetime"
    })

    user_drivers_list = user_drivers.get(user_id, [])
    if user_drivers_list:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        keyboard = get_drivers_selection_keyboard(user_id)
        await message.answer(
            "üë®‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        user_state.update({
            "state": "waiting_new_driver_name",
            "previous_state": "waiting_driver_selection"
        })
        await message.answer("üë®‚Äçüíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤–æ–≥–æ!", reply_markup=get_back_keyboard())
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ–±—ã–≤–∞–µ–≤ –û–ª–µ–≥ –í–∞—Å–∏–ª—å–µ–≤–∏—á")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("toggle_driver_"))
async def handle_toggle_driver(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    driver_index = int(callback.data.split("_")[2])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    if user_id not in user_selections:
        user_selections[user_id] = {}
    if 'selected_drivers' not in user_selections[user_id]:
        user_selections[user_id]['selected_drivers'] = []

    selected_drivers = user_selections[user_id]['selected_drivers']

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if driver_index in selected_drivers:
        selected_drivers.remove(driver_index)
    else:
        selected_drivers.append(driver_index)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞
    user_drivers_list = user_drivers.get(user_id, [])
    if user_drivers_list:
        keyboard = get_drivers_selection_keyboard(user_id)
        await callback.message.edit_text(
            "üë®‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç")


@dp.callback_query(lambda c: c.data == "confirm_drivers")
async def handle_confirm_drivers(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_state = user_states.get(user_id, {})
    selected_drivers = user_selections.get(user_id, {}).get('selected_drivers', [])

    if not selected_drivers:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è")
        return

    user_drivers_list = user_drivers.get(user_id, [])
    selected_drivers_objects = []

    for driver_index in selected_drivers:
        if 0 <= driver_index < len(user_drivers_list):
            selected_drivers_objects.append(user_drivers_list[driver_index])

    if selected_drivers_objects:
        user_state.update({
            "drivers": selected_drivers_objects,
            "state": "waiting_vehicle_selection",
            "previous_state": "waiting_driver_selection"
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        user_vehicles_list = user_vehicles.get(user_id, [])
        if user_vehicles_list:
            keyboard = get_vehicles_selection_keyboard(user_id)
            await callback.message.edit_text(
                "üöå –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            user_state.update({
                "state": "waiting_new_vehicle_model",
                "previous_state": "waiting_vehicle_selection"
            })
            await callback.message.edit_text(
                "üöå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π!",
                parse_mode="HTML"
            )
            await callback.message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–ø—Ä–∏–Ω—Ç–µ—Ä")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")


@dp.callback_query(lambda c: c.data == "add_driver_in_trip")
async def handle_add_driver_in_trip(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {
        "state": "waiting_new_driver_name",
        "previous_state": "waiting_driver_selection"
    }
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ–±—ã–≤–∞–µ–≤ –ê—Ä—Ç–µ–º –ü–∞–≤–ª–æ–≤–∏—á",
        reply_markup=get_back_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("select_vehicle_"))
async def handle_select_vehicle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_state = user_states.get(user_id, {})
    vehicle_index = int(callback.data.split("_")[2])

    user_vehicles_list = user_vehicles.get(user_id, [])
    if 0 <= vehicle_index < len(user_vehicles_list):
        vehicle_selected = user_vehicles_list[vehicle_index]
        user_state.update({
            "vehicle": vehicle_selected,
            "state": "waiting_passenger_count",
            "previous_state": "waiting_vehicle_selection"
        })

        await callback.message.edit_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")


@dp.callback_query(lambda c: c.data == "add_vehicle_in_trip")
async def handle_add_vehicle_in_trip(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {
        "state": "waiting_new_vehicle_model",
        "previous_state": "waiting_vehicle_selection"
    }
    await callback.message.edit_text(
        "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–ø—Ä–∏–Ω—Ç–µ—Ä",
        reply_markup=get_back_keyboard()
    )


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_new_driver_name")
async def handle_new_driver_name(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    user_state.update({
        "new_driver_name": message.text,
        "state": "waiting_new_driver_birth_date",
        "previous_state": "waiting_new_driver_name"
    })
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.1999", reply_markup=get_back_keyboard())


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_new_driver_birth_date")
async def handle_new_driver_birth_date(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if not validate_birth_date(message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.1999",
            reply_markup=get_back_keyboard()
        )
        return

    user_state.update({
        "new_driver_birth_date": message.text,
        "state": "waiting_new_driver_passport",
        "previous_state": "waiting_new_driver_birth_date"
    })
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è (10 —Ü–∏—Ñ—Ä):\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1234567891",
                         reply_markup=get_back_keyboard())


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_new_driver_passport")
async def handle_new_driver_passport(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if not validate_passport(message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1234567891",
            reply_markup=get_back_keyboard()
        )
        return

    new_driver = {
        "name": user_state["new_driver_name"],
        "birth_date": user_state["new_driver_birth_date"],
        "passport": message.text
    }

    if user_id not in user_drivers:
        user_drivers[user_id] = []
    user_drivers[user_id].append(new_driver)

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–æ–¥–∏—Ç–µ–ª–µ–π
    user_state.update({
        "state": "waiting_driver_selection",
        "previous_state": "waiting_new_driver_passport"
    })

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    user_drivers_list = user_drivers.get(user_id, [])
    if user_drivers_list:
        keyboard = get_drivers_selection_keyboard(user_id)
        await message.answer(
            "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüë®‚Äçüíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è")


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_new_vehicle_model")
async def handle_new_vehicle_model(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    user_state.update({
        "new_vehicle_model": message.text,
        "state": "waiting_new_vehicle_number",
        "previous_state": "waiting_new_vehicle_model"
    })
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∞777–∞–∞31", reply_markup=get_back_keyboard())


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_new_vehicle_number")
async def handle_new_vehicle_number(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if not validate_vehicle_number(message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∞777–∞–∞31",
            reply_markup=get_back_keyboard()
        )
        return

    new_vehicle = {
        "model": user_state["new_vehicle_model"],
        "number": message.text.upper()
    }

    if user_id not in user_vehicles:
        user_vehicles[user_id] = []
    user_vehicles[user_id].append(new_vehicle)

    user_state.update({
        "state": "waiting_vehicle_selection",
        "previous_state": "waiting_new_vehicle_number"
    })

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    user_vehicles_list = user_vehicles.get(user_id, [])
    if user_vehicles_list:
        keyboard = get_vehicles_selection_keyboard(user_id)
        await message.answer(
            "‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüöå –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")


@dp.message(lambda message: get_user_state(message.from_user.id) == "waiting_passenger_count")
async def handle_passenger_count(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['trip_type', 'route', 'departure_datetime', 'arrival_datetime', 'drivers', 'vehicle']
    missing_fields = []

    for field in required_fields:
        if field not in user_state:
            missing_fields.append(field)

    if missing_fields:
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞.\n\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: " + ", ".join(
            missing_fields)
        await message.answer(
            error_message,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {}
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15", reply_markup=get_back_keyboard())
        return

    user_state["passenger_count"] = message.text

    trip_id = len(user_trips.get(user_id, [])) + 1
    trip_data = {
        "id": trip_id,
        "trip_type": user_state['trip_type'],
        "route": user_state['route'],
        "departure_datetime": user_state['departure_datetime'],
        "arrival_datetime": user_state['arrival_datetime'],
        "drivers": user_state['drivers'],
        "vehicle": user_state['vehicle'],
        "passenger_count": user_state['passenger_count'],
        "status": "–∞–∫—Ç–∏–≤–Ω—ã–π"
    }

    if user_id not in user_trips:
        user_trips[user_id] = []
    user_trips[user_id].append(trip_data)

    # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_selections:
        user_selections[user_id] = {}

    user_states[user_id] = {}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    drivers_text = ", ".join([driver['name'] for driver in user_state['drivers']])

    trip_info = f"""
‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ:
‚îú –¢–∏–ø —Ä–µ–π—Å–∞: {user_state['trip_type'].upper()}
‚îú –ú–∞—Ä—à—Ä—É—Ç: {user_state['route']}
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_state['departure_datetime']}
‚îú –ü—Ä–∏–±—ã—Ç–∏–µ: {user_state['arrival_datetime']}
‚îú –í–æ–¥–∏—Ç–µ–ª–∏: {drivers_text}
‚îú –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {user_state['vehicle']['model']} ({user_state['vehicle']['number']})
‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {user_state['passenger_count']}

üìå –†–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤.
"""

    await message.answer(
        trip_info,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )


@dp.callback_query(lambda c: c.data == "my_drivers")
async def handle_my_drivers(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_drivers_list = user_drivers.get(user_id, [])

    if not user_drivers_list:
        await callback.message.edit_text(
            "üë®‚Äçüíº –ú–æ–∏ –≤–æ–¥–∏—Ç–µ–ª–∏\n\nüö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π.",
            parse_mode="HTML",
            reply_markup=get_drivers_management_keyboard()
        )
        return

    drivers_text = "üë®‚Äçüíº –ú–æ–∏ –≤–æ–¥–∏—Ç–µ–ª–∏\n\n"
    for i, driver in enumerate(user_drivers_list, 1):
        drivers_text += f"""
{i}. {driver['name']}
   üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {driver['birth_date']}
   üìÑ –ü–∞—Å–ø–æ—Ä—Ç: {driver['passport']}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

    await callback.message.edit_text(
        drivers_text,
        parse_mode="HTML",
        reply_markup=get_drivers_management_keyboard()
    )


@dp.callback_query(lambda c: c.data == "my_transport")
async def handle_my_transport(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_vehicles_list = user_vehicles.get(user_id, [])

    if not user_vehicles_list:
        await callback.message.edit_text(
            "üöå –ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n\nüö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.",
            parse_mode="HTML",
            reply_markup=get_vehicles_management_keyboard()
        )
        return

    vehicles_text = "üöå –ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n\n"
    for i, vehicle in enumerate(user_vehicles_list, 1):
        vehicles_text += f"""
{i}. {vehicle['model']}
   üî¢ –ù–æ–º–µ—Ä: {vehicle['number']}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

    await callback.message.edit_text(
        vehicles_text,
        parse_mode="HTML",
        reply_markup=get_vehicles_management_keyboard()
    )


@dp.callback_query(lambda c: c.data == "add_driver")
async def handle_add_driver_from_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {
        "state": "waiting_new_driver_name",
        "previous_state": "menu"
    }
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ–±—ã–≤–∞–µ–≤ –ê—Ä—Ç–µ–º –ü–∞–≤–ª–æ–≤–∏—á",
        reply_markup=get_back_keyboard()
    )


@dp.callback_query(lambda c: c.data == "add_vehicle")
async def handle_add_vehicle_from_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {
        "state": "waiting_new_vehicle_model",
        "previous_state": "menu"
    }
    await callback.message.edit_text(
        "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–ø—Ä–∏–Ω—Ç–µ—Ä",
        reply_markup=get_back_keyboard()
    )


@dp.callback_query(lambda c: c.data == "delete_driver")
async def handle_delete_driver(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_drivers_list = user_drivers.get(user_id, [])

    if not user_drivers_list:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    builder = InlineKeyboardBuilder()
    for i, driver in enumerate(user_drivers_list, 1):
        builder.row(InlineKeyboardButton(text=f"{i}. {driver['name']}", callback_data=f"delete_driver_{i - 1}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_drivers"))

    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("delete_driver_"))
async def handle_driver_deletion(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    driver_index = int(callback.data.split("_")[2])

    user_drivers_list = user_drivers.get(user_id, [])

    if 0 <= driver_index < len(user_drivers_list):
        driver_name = user_drivers_list[driver_index]['name']
        del user_drivers_list[driver_index]
        await callback.message.edit_text(
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver_name} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_drivers_management_keyboard()
        )
    else:
        await callback.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query(lambda c: c.data == "delete_vehicle")
async def handle_delete_vehicle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_vehicles_list = user_vehicles.get(user_id, [])

    if not user_vehicles_list:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    builder = InlineKeyboardBuilder()
    for i, vehicle in enumerate(user_vehicles_list, 1):
        builder.row(InlineKeyboardButton(text=f"{i}. {vehicle['model']} ({vehicle['number']})",
                                         callback_data=f"delete_vehicle_{i - 1}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_transport"))

    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("delete_vehicle_"))
async def handle_vehicle_deletion(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    vehicle_index = int(callback.data.split("_")[2])

    user_vehicles_list = user_vehicles.get(user_id, [])

    if 0 <= vehicle_index < len(user_vehicles_list):
        vehicle_model = user_vehicles_list[vehicle_index]['model']
        del user_vehicles_list[vehicle_index]
        await callback.message.edit_text(
            f"‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {vehicle_model} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_vehicles_management_keyboard()
        )
    else:
        await callback.answer("‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


user_trip_pages = {}


@dp.callback_query(lambda c: c.data == "my_trips")
async def handle_my_trips(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_trips_list = user_trips.get(user_id, [])

    if not user_trips_list:
        await callback.message.edit_text(
            "üìã –ú–æ–∏ —Ä–µ–π—Å—ã\n\nüö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.\nüó∫Ô∏è –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–π—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å'",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        return

    user_trip_pages[user_id] = 0
    await show_trip_page(callback, user_id, 0)


async def show_trip_page(callback: types.CallbackQuery, user_id: int, page: int):
    user_trips_list = user_trips.get(user_id, [])
    trips_per_page = 3
    start_index = page * trips_per_page
    end_index = start_index + trips_per_page

    current_trips = user_trips_list[start_index:end_index]

    if not current_trips:
        await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–π—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    trips_text = "üìã –ú–æ–∏ —Ä–µ–π—Å—ã\n\n"
    trips_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"

    for i, trip in enumerate(current_trips, 1):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        drivers_text = ", ".join([driver['name'] for driver in trip['drivers']])
        trips_text += f"üîπ {trip['route']}\n"
        trips_text += f"   üìÖ {trip['departure_datetime']}\n"
        trips_text += f"   üë§ {drivers_text}\n"
        trips_text += f"   üöó {trip['vehicle']['model']}\n"
        trips_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    builder = InlineKeyboardBuilder()

    for i in range(len(current_trips)):
        builder.row(InlineKeyboardButton(text=f"–†–µ–π—Å {start_index + i + 1}", callback_data=f"trip_{start_index + i}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_trips"))
    if end_index < len(user_trips_list):
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data="next_trips"))

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))

    await callback.message.edit_text(
        trips_text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("trip_"))
async def handle_trip_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        trip_number = int(callback.data.split("_")[1])
        user_trips_list = user_trips.get(user_id, [])

        if 0 <= trip_number < len(user_trips_list):
            trip = user_trips_list[trip_number]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            drivers_text = "\n".join([f"   üë§ {driver['name']}" for driver in trip['drivers']])

            trip_info = f"""
üîπ –†–µ–π—Å #{trip['id']}
‚îú –¢–∏–ø: {trip['trip_type'].upper()}
‚îú –ú–∞—Ä—à—Ä—É—Ç: {trip['route']}
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trip['departure_datetime']}
‚îú –ü—Ä–∏–±—ã—Ç–∏–µ: {trip['arrival_datetime']}
{drivers_text}
‚îú –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {trip['vehicle']['model']} ({trip['vehicle']['number']})
‚îú –ü–∞—Å—Å–∞–∂–∏—Ä—ã: {trip['passenger_count']}
‚îî –°—Ç–∞—Ç—É—Å: {trip['status']}
"""
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Å–∞–º", callback_data="my_trips"))
            builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))

            await callback.message.edit_text(
                trip_info,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer("‚ùå –†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞.")


@dp.callback_query(lambda c: c.data in ["next_trips", "prev_trips"])
async def handle_trips_navigation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_page = user_trip_pages.get(user_id, 0)

    if callback.data == "next_trips":
        new_page = current_page + 1
    else:
        new_page = max(0, current_page - 1)

    user_trip_pages[user_id] = new_page
    await show_trip_page(callback, user_id, new_page)


@dp.callback_query(lambda c: c.data == "platform")
async def handle_platform(callback: types.CallbackQuery):
    try:
        await callback.message.answer_photo(
            photo=FSInputFile("Pictures/Platform.jpg"),
            caption="""üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞

–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π üì±
https://moyaplatforma.ru/""",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
    except:
        await callback.message.answer(
            """üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞

–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π üì±
https://moyaplatforma.ru/""",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )


@dp.callback_query(lambda c: c.data == "support")
async def handle_support(callback: types.CallbackQuery):
    try:
        await callback.message.answer_photo(
            photo=FSInputFile("Pictures/Help.jpg"),
            caption="""üì¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —Å—é–¥–∞:
+79155762192""",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
    except:
        await callback.message.answer(
            """üì¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —Å—é–¥–∞:
+79155762192""",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )


@dp.message()
async def handle_unknown_message(message: types.Message):
    current_state = get_user_state(message.from_user.id)

    if current_state is None:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.",
            reply_markup=get_back_keyboard()
        )


async def main():
    print("Bot started!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
